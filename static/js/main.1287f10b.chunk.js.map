{"version":3,"sources":["gas-pump.svg","Header.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","src","logo","alt","App","useState","proportion","gas","values","set_values","handleInput","e","name","target","value","newValues","handleOilInput","oil","setOil","console","log","htmlFor","id","type","max","onChange","readOnly","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+QAAe,G,YAAA,IAA0B,sCCY1BA,MATf,WACI,OACI,sBAAKC,UAAU,SAAf,UACI,qBAAKC,IAAKC,EAAMF,UAAU,WAAWG,IAAI,SACzC,mECmEGC,MAtEf,WAAgB,IAAD,EACeC,mBAAS,CACnCC,WAAW,GACXC,IAAI,KAHO,mBACNC,EADM,KACCC,EADD,KAMPC,EAAc,SAACC,GACnB,IAAIC,EAAOD,EAAEE,OAAOD,KAChBE,EAAQH,EAAEE,OAAOC,MAEfC,EAAS,2BACVP,GADU,kBAEZI,EAAOE,IAEVL,EAAWM,GAEXC,EAAeD,IAhBJ,EAmBSV,mBAAS,IAnBlB,mBAmBNY,EAnBM,KAmBDC,EAnBC,KAqBPF,EAAiB,SAACD,GACtBI,QAAQC,IAAIL,GADwB,IAE7BT,EAAmBS,EAAnBT,WAAYC,EAAOQ,EAAPR,IACnBY,QAAQC,IAAId,GAEZY,EADqB,IAAJX,EAAUD,IAI7B,OACE,sBAAKN,UAAU,MAAf,UACE,cAAC,EAAD,IACE,uBAAMA,UAAU,cAAhB,UACE,sBAAKA,UAAU,aAAf,UACE,uBAAOqB,QAAQ,cAAf,2BACA,uBACEC,GAAG,cACHC,KAAK,SACLX,KAAK,aACLY,IAAI,MACJC,SAAYf,OAIhB,sBAAKV,UAAU,aAAf,UACE,uBAAOqB,QAAQ,OAAf,+BACA,uBACEC,GAAG,OACHC,KAAK,SACLX,KAAK,MACLa,SAAUf,OAId,sBAAKV,UAAU,aAAf,UACE,uBAAOqB,QAAQ,OAAf,gCACA,uBACEC,GAAG,OACHC,KAAK,SACLX,KAAK,MACLc,UAAQ,EACRZ,MAAOG,cCrDNU,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.1287f10b.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/gas-pump.466f1d9d.svg\";","import './Header.scss';\nimport logo from './gas-pump.svg';\n\nfunction Header() {\n    return (\n        <div className='header'>\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <h1>App for oil & gas measurement</h1>\n        </div>\n    );\n}\n\nexport default Header;\n\n","import './App.scss';\nimport Header from './Header';\nimport React, {useState} from 'react';\n\nfunction App() {\n  const [values,set_values] = useState({\n    proportion:'',\n    gas:'',\n})\n\n  const handleInput = (e) => {\n    let name = e.target.name;\n    let value = e.target.value;\n\n    const newValues = {\n      ...values,\n      [name]: value\n    }\n    set_values(newValues);\n\n    handleOilInput(newValues);\n  }\n\n  const [oil, setOil] = useState(''); \n\n  const handleOilInput = (newValues) => {\n    console.log(newValues);\n    const {proportion, gas} = newValues;\n    console.log(proportion);\n    const oilCalc= ((gas*1000)/proportion);\n    setOil(oilCalc);\n  }\n\n  return (\n    <div className=\"App\">\n      <Header />\n        <form className='calculation'>\n          <div className='form-group'>\n            <label htmlFor=\"#proportion\">Proportion 1:</label>\n            <input \n              id=\"#proportion\" \n              type=\"number\" \n              name=\"proportion\"\n              max=\"100\"\n              onChange = {handleInput}\n              >\n            </input>\n          </div>\n          <div className='form-group'>\n            <label htmlFor=\"#gas\">Amount of gas (l)</label>\n            <input \n              id=\"#gas\" \n              type=\"number\" \n              name=\"gas\"\n              onChange={handleInput}\n              >\n              </input>\n          </div>\n          <div className='form-group'>\n            <label htmlFor=\"#oil\">Amount of oil (ml)</label>\n            <input \n              id=\"#oil\" \n              type=\"number\" \n              name=\"oil\"\n              readOnly\n              value={oil}\n            >\n            </input>\n            </div>\n        </form>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}